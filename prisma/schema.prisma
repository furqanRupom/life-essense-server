// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum BloodDonate {
  Yes
  no
}
enum Status {
  ACTIVATE
  DEACTIVATE
}
// User model

model SocialMediaMethods {
  id        String  @id @default(uuid())
  userId    String  @unique
  facebook  String?
  instagram String?
  twitter   String?
  whatsApp  String?
  user      User    @relation(fields: [userId], references: [id])
}

model User {
  id                   String              @id @default(uuid())
  name                 String
  email                String              @unique
  role                 Role                @default(USER)
  password             String
  bloodType            BloodGroup
  image                String?
  phoneNumber          String?
  emergencyPhoneNumber String?
  location             String
  status               Status?             @default(ACTIVATE)
  bloodDonate          BloodDonate?        @default(no)
  availability         Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  profile              UserProfile?
  doner                Request[]           @relation("donor")
  requester            Request[]           @relation("requester")
  socialMediaMethods   SocialMediaMethods?

  @@map("users")
}

model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String?
  age              Int?
  lastDonationDate String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@map("userprofiles")
}

// Request model

model Request {
  id              String        @id @default(uuid())
  donorId         String
  name            String?
  email           String?
  bloodType       String?
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  timeOfDonation  String?
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  donor     User @relation("donor", fields: [donorId], references: [id])
  requester User @relation("requester", fields: [requesterId], references: [id])

  @@map("requestes")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}
